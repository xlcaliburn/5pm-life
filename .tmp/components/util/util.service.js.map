{"version":3,"sources":["components/util/util.service.js"],"names":[],"mappings":"AAAA;;AAEA,CAAC,YAAW;;;;;AAKV,WAAS,WAAT,CAAqB,OAArB,EAA8B;AAC5B,QAAI,OAAO;;;;;;;;AAOT,YAPS,kBAOF,EAPE,EAOE;AACT,eAAO,QAAQ,UAAR,CAAmB,EAAnB,IAAyB,EAAzB,GAA8B,QAAQ,IAA7C;AACD,OATQ;;;;;;;;;AAiBT,cAjBS,oBAiBA,GAjBA,EAiBK;AACZ,YAAI,IAAI,SAAS,aAAT,CAAuB,GAAvB,CAAR;AACA,UAAE,IAAF,GAAS,GAAT;;;AAGA,YAAI,EAAE,IAAF,KAAW,EAAf,EAAmB;AACjB,YAAE,IAAF,GAAS,EAAE,IAAX;AACD;;AAED,eAAO,CAAP;AACD,OA3BQ;;;;;;;;;;AAoCT,kBApCS,wBAoCI,GApCJ,EAoCS,OApCT,EAoCkB;AACzB,cAAM,KAAK,QAAL,CAAc,GAAd,CAAN;AACA,kBAAU,WAAW,GAAG,MAAH,CAAU,OAAV,CAAX,IAAiC,EAA3C;AACA,kBAAU,QAAQ,GAAR,CAAY,KAAK,QAAjB,CAAV;AACA,gBAAQ,IAAR,CAAa,QAAQ,QAArB;AACA,kBAAU,QAAQ,MAAR,CAAe,UAAS,CAAT,EAAY;AACnC,iBAAO,IAAI,QAAJ,KAAiB,EAAE,QAAnB,IAA+B,IAAI,IAAJ,KAAa,EAAE,IAA9C,IAAsD,IAAI,QAAJ,KAAiB,EAAE,QAAhF;AACD,SAFS,CAAV;AAGA,eAAO,QAAQ,MAAR,IAAkB,CAAzB;AACD;AA7CQ,KAAX;;AAgDA,WAAO,IAAP;AACD;;AAED,UAAQ,MAAR,CAAe,aAAf,EACG,OADH,CACW,MADX,EACmB,WADnB;AAED,CA3DD","file":"components/util/util.service.js","sourcesContent":["'use strict';\n\n(function() {\n\n  /**\n   * The Util service is for thin, globally reusable, utility functions\n   */\n  function UtilService($window) {\n    var Util = {\n      /**\n       * Return a callback or noop function\n       *\n       * @param  {Function|*} cb - a 'potential' function\n       * @return {Function}\n       */\n      safeCb(cb) {\n        return angular.isFunction(cb) ? cb : angular.noop;\n      },\n\n      /**\n       * Parse a given url with the use of an anchor element\n       *\n       * @param  {String} url - the url to parse\n       * @return {Object}     - the parsed url, anchor element\n       */\n      urlParse(url) {\n        var a = document.createElement('a');\n        a.href = url;\n\n        // Special treatment for IE, see http://stackoverflow.com/a/13405933 for details\n        if (a.host === '') {\n          a.href = a.href;\n        }\n\n        return a;\n      },\n\n      /**\n       * Test whether or not a given url is same origin\n       *\n       * @param  {String}           url       - url to test\n       * @param  {String|String[]}  [origins] - additional origins to test against\n       * @return {Boolean}                    - true if url is same origin\n       */\n      isSameOrigin(url, origins) {\n        url = Util.urlParse(url);\n        origins = origins && [].concat(origins) || [];\n        origins = origins.map(Util.urlParse);\n        origins.push($window.location);\n        origins = origins.filter(function(o) {\n          return url.hostname === o.hostname && url.port === o.port && url.protocol === o.protocol;\n        });\n        return origins.length >= 1;\n      }\n    };\n\n    return Util;\n  }\n\n  angular.module('5pmApp.util')\n    .factory('Util', UtilService);\n})();\n"],"sourceRoot":"/source/"}